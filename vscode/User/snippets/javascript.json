{
  // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // More info: https://code.visualstudio.com/docs/editor/userdefinedsnippets
  // Editor: [snippet generator](https://pawelgrzybek.com/snippet-generator/)
  // Example:
  "variable-const": {
    "prefix": "\\c",
    "body": [
      "const $1 = $2;"
    ]
  },
  "console-log": {
    "prefix": "\\cl-arrow",
    "body": [
      "console.log('-->', $1);"
    ]
  },
  "console-log-a-variable": {
    "prefix": "\\cl-variable",
    "body": "console.log(\"$0:\", $0)"
  },
  "print-to-console-for-each": {
    "description": "Log output to console an array item.",
    "prefix": "\\cl-for-each",
    "body": [
      "forEach(item => console.log(\"->\", item$1));"
    ]
  },
  "require": {
    "description": "Add require",
    "prefix": "\\require",
    "body": [
      "const $1$2 = require(\"$1\");",
      "$0"
    ]
  },
  "function-state": {
    "description": "Simple function with state passage.",
    "prefix": "\\function-state",
    "body": [
      "function ${1:name}(state){",
      "  $0",
      "  return state;",
      "}"
    ]
  },
  "function-result": {
    "description": "Simple function with return result.",
    "prefix": "\\function-result",
    "body": [
      "function ${1:name}(${2:xxx}){",
      "  $0",
      "  const result = true;",
      "  return result;",
      "}"
    ]
  },
  "object-assign": {
    "prefix": "\\object-assign",
    "body": [
      "$0Object.assign(${1:Object.create(null)}, ${2:obj1}, ${3:obj2});"
    ]
  },
  "promise-return-resolve": {
    "prefix": "\\promsie-resolve",
    "body": [
      "return Promise.resolve(${1:state}).then($2);",
      "$0"
    ]
  },
  "promise-catch": {
    "prefix": "\\promsie-catch",
    "body": [
      ".catch(${1:handleExeptions}.bind(state));",
      "$0function ${1:handleExeptions}(error) {",
      "  const state = this;",
      "  throw new Error(`${${2:state.moduleName}} Error: ${error.message}`);  ",
      "}",
      ""
    ]
  },
  "await-promise-all": {
    "prefix": "\\promise-all",
    "body": "await Promise.all(${1:value})"
  },
  "promise-return": {
    "prefix": "\\r-promise",
    "body": [
      "return new Promise((resolve, reject) => {",
      "  $0",
      "});"
    ]
  },
  "test-unit": {
    "description": "Ava test unit.",
    "prefix": "\\test",
    "body": [
      "test(\"$1\", t => {",
      "  const msg = \"should return $1\";",
      "  const actual = $0true;",
      "  const expected = true;",
      "  t.is(actual, expected, msg);",
      "});"
    ]
  },
  "test-unit-async": {
    "description": "Ava test aync unit.",
    "prefix": "\\test-async",
    "body": [
      "test(\"$1\", async t => {",
      "  const msg = \"should return $1\";",
      "  const actual = await $0true;",
      "  const expected = true;",
      "  t.is(actual, expected, msg);",
      "});"
    ]
  },
  "test-assertion-content": {
    "description": "Ava test assertion content.",
    "prefix": "\\test-content",
    "body": [
      "const msg${1:2} = \"should return $0\";",
      "const actual${1:2} = true;",
      "const expected${1:2} = true;",
      "t.is(actual${1:2}, expected${1:2}, msg${1:2});"
    ]
  },
  "test-assertion-content-checkfile": {
    "description": "Ava test assertion check file content.",
    "prefix": "\\test-content-file",
    "body": [
      "$0${1:import ifExists from \"qm-fs-ifexists\";}",
      "const msg${2:2} = \"should exists ${3:what?} file.\";",
      "const actual${2:2} = ifExists(${4:expectedFilePath}, {",
      "  asBoolean: false,",
      "  synchronous: true",
      "});",
      "const expected${2:2} = \"file\";",
      "t.deepEqual(actual${2:2}, expected${2:2}, msg${2:2});"
    ]
  },
  "test-assertion-content-checkjsonfile-content": {
    "description": "Ava test assertion check json file content.",
    "prefix": "\\test-content-json-file",
    "body": [
      "$0${1:import readJsonFile from \"load-json-file\";}",
      "const msg${2:2} = \"should in json file exists property ${3:what?} with exact content\";",
      "const obj = await loadJsonFile(state.filePath);",
      "const actual${2:2} = obj.${3:property};",
      "const expected${2:2} = \"${4:content}\";",
      "t.is(actual${2:2}, expected${2:2}, msg${2:2});"
    ]
  },
  "test-unit-error": {
    "description": "Ava test assertion error content.",
    "prefix": "\\test-error",
    "body": [
      "test(\"error $1\", t => {",
      "  const msg = \"should throw an error $1\";",
      "  const error = t.throws( ${2:fn}($0) );",
      "  t.is(error.message.slice(0, 50) + \"...\", \"YYY-XXX - ${2:fn}(): ...\", msg);",
      "});"
    ]
  },
  "gulp-task": {
    "prefix": "\\gulp-task",
    "body": [
      "const ${1:XXX} = () =>",
      "  gulp",
      "    .src(paths.${2:ZZZ})",
      "    .pipe($0)",
      "    .pipe(gulp.dest(paths.${3:QQQ}));",
      "",
      "gulp.task(\"${1:XXX}\", ${1:XXX});"
    ]
  },
  "gulp-task-default": {
    "prefix": "\\gulp-default",
    "body": [
      "gulp.task(",
      "  \"default\",",
      "  gulp.${1|parallel,series|}(\"${2:task}\")$0",
      ");"
    ]
  },
  "js-syntax-template-literals-expression": {
    "description": "Insert: ${}",
    "prefix": "\\str-expression",
    "body": [
      "${$1}$0"
    ]
  },
  "JSON-stringify": {
    "prefix": "\\json-stringify",
    "body": "JSON.stringify($0)"
  },
  "JSON-parse": {
    "prefix": "\\json-parse",
    "body": "JSON.parse($0)"
  },
  "object-keys": {
    "prefix": "\\object-keys",
    "body": "Object.keys(${1:obj})"
  },
  "object-values": {
    "prefix": "\\object-values",
    "body": "Object.values(${1:obj})"
  },
  "object-entries": {
    "prefix": "\\object-entries",
    "body": "Object.entries(${1:obj})"
  },
  "return": {
    "prefix": "\\r",
    "body": "return ${0}"
  },
  "return-result": {
    "prefix": "\\rr",
    "body": "const result = \"xxx\";\nreturn result;"
  },
  "forEach-loop": {
    "prefix": "\\forEach",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "\\map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "\\reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "\\filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "if-statement": {
    "prefix": "\\if",
    "body": "if (${1:condition}) {\n\t${0}\n}"
  },
  "else-statement": {
    "prefix": "\\else",
    "body": "else {\n\t${0}\n}"
  },
  "else-if-statement": {
    "prefix": "\\else-if",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "throw-new-error": {
    "prefix": "\\tne",
    "body": "throw new ${0:error}"
  },
  "arrow-function": {
    "prefix": "\\af",
    "body": "(${1:item}) => ${2:item}"
  },
  "arrow-function-with-return": {
    "prefix": "\\af-with-return",
    "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
  }
}